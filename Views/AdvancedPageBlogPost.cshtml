@inherits UmbracoViewPage

@{
    Layout = "USNMaster.cshtml";
}

@Html.Partial("USNAdvancedPageComponents/USN_AdvancedPageComponents", Model)	

<!-- CONTENT -->
<section class="content apc standard-components">
    <div class="container">

        <!-- ROW -->
        <div class="row">

            <!-- MID COL -->
            <div id="mid-col" class="col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12">

                <!-- META -->
				<div class="spc">
                @Html.Partial("USNBlog/USN_BlogMeta", Model, new ViewDataDictionary { { "globalSettingsID", Model.GlobalSettings.Id } })
				</div>
                <!--// META -->

                <!-- AUTHOR BIO -->
                @Html.Partial("USNBlog/USN_BlogAuthorship", Model)
                <!--// AUTHOR BIO -->

                <!-- COMMENTS -->
                @Html.Partial("USNBlog/USN_BlogComments", Model)
                <!--// COMMENTS -->

            </div>
            <!--// MID COL -->

        </div>
        <!--// ROW -->

    </div>
</section>
<!--// CONTENT -->

@Html.Partial("USNSiteWidePods/USN_SitewidePods", Model, new ViewDataDictionary { { "podstyle", "horizontal" }, { "pagetype", "advanced" } })
	
@section BodyTag
{
    @{
        string headerClass = String.Empty;

        if (Model.Value<bool>("hideWebsiteHeaderSection"))
        {
            headerClass = "no-header";
        }

        if (Model.Value<bool>("hideWebsiteFooterSection"))
        {
            headerClass = headerClass + " no-footer";
        }

        var globalSettings = (Umbraco.Web.PublishedModels.GlobalSettings)Model.GlobalSettings();

        string fixedWidth = String.Empty;

        if (globalSettings.FixedWidth)
        {
            fixedWidth = "fixed-width";
        }

        string customBodyClass = String.Empty;

        if (Model.HasValue("customBodyClasses"))
        {
            customBodyClass = Model.Value<string>("customBodyClasses");
        }

        string bannerClass = String.Empty;

        IEnumerable<IPublishedContent> components = null;

        if (Model.Value<bool>("overrideDefaultTopComponents"))
        {
            if (Model.HasValue("topComponents"))
            {
                components = Model.Value<IEnumerable<IPublishedContent>>("topComponents");
            }
        }
        else
        {
            if (globalSettings.DefaultTopComponents.HasValue())
            {
                components = globalSettings.DefaultTopComponents;
            }
        }

        if (components != null && components.Any())
        {
            var publishedContents = components as IList<IPublishedContent> ?? components.ToList();

            bannerClass = publishedContents.FirstOrDefault().IsDocumentType(Usn_Ac_Banner_AN.ModelTypeAlias) ? "banner-top" : "";
        }

        //If no top components look at page components next
        else
        {
            UsnadvancedPageComponents pageComponentsNode = Model.Children<UsnadvancedPageComponents>().FirstOrDefault();

            if (pageComponentsNode != null && pageComponentsNode.Children.FirstOrDefault() != null && pageComponentsNode.Children.First().IsDocumentType(Usn_Ac_Banner_AN.ModelTypeAlias))
            {
                bannerClass = "banner-top";
            }

        }
    }

    @Html.Raw(" class=\"advanced-page " + bannerClass + " " + headerClass + " " + fixedWidth + " " + customBodyClass + "\"")
}