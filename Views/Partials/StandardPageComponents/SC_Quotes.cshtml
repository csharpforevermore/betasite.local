@inherits UmbracoViewPage

@{
    string anchorId = String.Empty;
    string customComponentClasses = String.Empty;

    TemplateStyleSettings settings;
    string animateClass = String.Empty;

    if (Model.Animate)
    {
        animateClass = "os-animation";
    }

    string pageType = ViewData["pageType"] != null ? ViewData["pageType"].ToString() : "standard";

    if (pageType == "standard")
    {
        settings = ViewTemplateHelper.GetDefaultTemplateStyleSettings();
    }
    else
    {
        settings = ViewTemplateHelper.GetTemplateStyleSettings(Model.BackgroundColor, Model.ButtonColor);
    }

    @* Add div for column width on Advanced Pages *@
    if (pageType == "advanced")
    {
        if (Model.Width == Options.ComponentWidth_Center)
        {
            @:<div class="container"><div class="row"><div class="mid-col col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12">
        }
        else if(Model.Width == Options.ComponentWidth_Full)
        {
            @:<div class="container-fluid"><div class="row"><div class="wide-col col-xs-12">
        }
        else
        {
            @:<div class="container"><div class="row"><div class="wide-col col-xs-12">
        }
        
    }
    else
    {
        anchorId = "id=\"pos_" + Model.Id + "\" ";
        customComponentClasses = Model.CustomComponentClasses;
    }

    <!-- PAGE COMPONENT BLOCKQUOTE -->
    <div class="spc blockquotes @animateClass @customComponentClasses" data-os-animation="fadeIn" data-os-animation-delay="0s" @Html.Raw(anchorId)>
	
        @Html.Partial("MiscPageElements/ComponentIntro", @Model as ICmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

        @if (Model.Quotes != null)
        {
            decimal autoRotateSpeed = 0;
            string slickAttributes = Model.EnableCarousel ? "data-slick='{{{0}{1}{2}{3}}}'" : "";
            string autoRotateAttribute = String.Empty;
            string slidesToShowAttribute = String.Empty;
            string dotsAttribute = Model.ShowDots ? "\"dots\": true " : "\"dots\": false ";
            string arrowsAttribute = Model.ShowArrows ? "\"arrows\": true " : "\"arrows\": false ";

            if (Model.EnableCarousel && Model.AutoRotateSpeed.HasValue())
            {
                autoRotateSpeed = Model.AutoRotateSpeed;
                if (autoRotateSpeed > 0)
                {
                    autoRotateSpeed = autoRotateSpeed * 1000;
                    autoRotateAttribute = "\"autoplay\": true, \"autoplaySpeed\": " + Convert.ToInt32(autoRotateSpeed);
                }
            }

            string quotesPerRow = String.Empty;
            string slidesToShow = String.Empty;

            switch (Model.QuotesPerRow)
            {
                case Options.ItemsPerRow_1:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 1";
                    }
                    else
                    {
                        quotesPerRow = "items-1 col-xs-12";
                    }
                    break;
                case Options.ItemsPerRow_2:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 2, \"responsive\": [{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                    }
                    else
                    {
                        quotesPerRow = "items-2 col-xs-12";
                    }
                    break;
                case Options.ItemsPerRow_3:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 3, \"responsive\": [{\"breakpoint\": 768,\"settings\": {\"slidesToShow\": 2}},{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                    }
                    else
                    {
                        quotesPerRow = "items-3 col-xs-12";
                    }
                    break;
                case Options.ItemsPerRow_4:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 4, \"responsive\": [{\"breakpoint\": 992,\"settings\": {\"slidesToShow\": 3}},{\"breakpoint\": 768,\"settings\": {\"slidesToShow\": 2}},{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                    }
                    else
                    {
                        quotesPerRow = "items-4 col-xs-12";
                    }
                    break;
                default:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 1";
                    }
                    else
                    {
                        quotesPerRow = "items-1 col-xs-12";
                    }
                    break;
            }

            //Add commas
            dotsAttribute = autoRotateAttribute != String.Empty ? dotsAttribute = "," + dotsAttribute : dotsAttribute;
            arrowsAttribute = autoRotateAttribute != String.Empty || dotsAttribute != String.Empty ? "," + arrowsAttribute : arrowsAttribute;
            slidesToShowAttribute = autoRotateAttribute != String.Empty || dotsAttribute != String.Empty || arrowsAttribute != String.Empty ? "," + slidesToShowAttribute : slidesToShowAttribute;

            slickAttributes = Model.EnableCarousel ? String.Format(slickAttributes, autoRotateAttribute, dotsAttribute, arrowsAttribute, slidesToShowAttribute) : String.Empty;

            string textAlignment;

            switch (Model.QuotesTextAlignment)
            {
                case Options.TextAlignment_Left:
                    textAlignment = "text-left";
                    break;
                case Options.TextAlignment_Center:
                    textAlignment = "text-center";
                    break;
                case Options.TextAlignment_Right:
                    textAlignment = "text-right";
                    break;
                default:
                    textAlignment = "text-left";
                    break;
            }

            <div class="quotes @textAlignment">

                @if (Model.EnableCarousel)
                {
                    @:<div class="row slides" @Html.Raw(slickAttributes)>
                }
                else
                {
                    @:<div class="row">
                }

                @foreach (Sc_Quote quote in Model.Quotes)
                {

                    <div class="item @quotesPerRow">
                        <blockquote>
                            <p class="@settings.HeadingStyle">@Html.Raw(Html.ReplaceLineBreaks(quote.Quote))</p>
                            @if (quote.Cite.HasValue())
                            {
                                <cite>
                                    <span class="who @settings.TextStyle">@quote.Cite</span>
                                </cite>
                            }
                        </blockquote>
                    </div>
                }

                @Html.Raw("</div>")


            </div>

        }

        @Html.Partial("MiscPageElements/ComponentOutro", @Model as ICmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

    </div>
    <!-- PAGE COMPONENT BLOCKQUOTE -->

    @* Close div for column width on Advanced Pages *@
    if (!Model.Parent.Parent.IsDocumentType(StandardPage.ModelTypeAlias) && !Model.Parent.Parent.IsDocumentType(StandardPageBlogPost.ModelTypeAlias))
    {
        @:</div></div></div>
    }
}
